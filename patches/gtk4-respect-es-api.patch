From 0f21f6c273f0f65eb9b5fd06d2bc5acf8701f397 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Pablo=20Correa=20G=C3=B3mez?= <ablocorrea@hotmail.com>
Date: Fri, 6 May 2022 16:40:13 +0200
Subject: glcontext: Respect ES API when getting gl version from shared context

On context realizations where the shared context has been already realized,
the GL version is taken directly from it instead of using the default
values. That can lead to errors when the shared context has been realized
with GL ES, but the api is not respected. In that case, the context will
by default attempt to be realized with GL but the GL ES version, creating
an unexpected discrepancy and leading to creating contexts unsuppoted by
GTK. For example, in the PinePhone GL 3.2 is unsupported, leading to the
creation of a shared GL ES 2.0 context by default. Subsequent contexts
will respect the 2.0 version, but not the ES, attempting to create a
GL 2.0 context. A GL 2.0 context is both unsupported by GTK and buggy
on the PinePhone, leading to crashes after the realization of the context.
Respecting the ES API when it is allowed by the context fixes both
the creation of an unsupported context and crashes experimented on the
PinePhone.
---

diff --git a/gdk/gdkglcontext.c b/gdk/gdkglcontext.c
index 1591cbd3ad..7ca704b33f 100644
--- a/gdk/gdkglcontext.c
+++ b/gdk/gdkglcontext.c
@@ -256,181 +256,228 @@ gdk_gl_context_get_property (GObject    *object,
     }
 }
 
-#define N_EGL_ATTRS     16
+static void
+gdk_gl_context_get_matching_version (GdkGLAPI  api,
+                                     gboolean  legacy,
+                                     gboolean  win32_libangle,
+                                     int      *major,
+                                     int      *minor)
+{
+  int maj, min;
+
+  if (api == GDK_GL_API_GL)
+    {
+      if (legacy)
+        {
+          maj = GDK_GL_MIN_GL_LEGACY_VERSION_MAJOR;
+          min = GDK_GL_MIN_GL_LEGACY_VERSION_MINOR;
+        }
+      else
+        {
+          maj = GDK_GL_MIN_GL_VERSION_MAJOR;
+          min = GDK_GL_MIN_GL_VERSION_MINOR;
+        }
+    }
+  else
+    {
+      if (win32_libangle)
+        {
+          maj = GDK_GL_MIN_GLES_WIN32_ANGLE_VERSION_MAJOR;
+          min = GDK_GL_MIN_GLES_WIN32_ANGLE_VERSION_MINOR;
+        }
+      else
+        {
+          maj = GDK_GL_MIN_GLES_VERSION_MAJOR;
+          min = GDK_GL_MIN_GLES_VERSION_MINOR;
+        }
+    }
+
+  if (major != NULL)
+    *major = maj;
+  if (minor != NULL)
+    *minor = min;
+}
+
+#define N_EGL_ATTRS 16
+
+#ifdef HAVE_EGL
+static inline void
+gdk_gl_context_setup_context_attributes (EGLint   *context_attribs,
+                                         GdkGLAPI  api,
+                                         int       major,
+                                         int       minor,
+                                         gboolean  legacy,
+                                         int       flags)
+{
+  int i = 0;
+
+  if (api == GDK_GL_API_GL)
+    {
+      /* We want a core profile, unless in legacy mode */
+      context_attribs[i++] = EGL_CONTEXT_OPENGL_PROFILE_MASK;
+      context_attribs[i++] = legacy
+        ? EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT
+        : EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT;
+    }
+
+  /* Before, ~FORWARD_COMPATIBLE was only in one of the code paths.
+   * Does it make sense to have legacy with FORWARD_COMPATIBLE?
+   * If not, then there should likely also be some assert somewhere!
+   *
+   * TODO: Remove this comment before merging!
+   */
+  if (legacy || api == GDK_GL_API_GLES)
+    flags &= ~EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR;
+
+  context_attribs[i++] = EGL_CONTEXT_MAJOR_VERSION;
+  context_attribs[i++] = major;
+  context_attribs[i++] = EGL_CONTEXT_MINOR_VERSION;
+  context_attribs[i++] = minor;
+  context_attribs[i++] = EGL_CONTEXT_FLAGS_KHR;
+  context_attribs[i++] = flags;
+
+  context_attribs[i++] = EGL_NONE;
+  g_assert (i < N_EGL_ATTRS);
+}
 
 static GdkGLAPI
-gdk_gl_context_real_realize (GdkGLContext  *context,
-                             GError       **error)
+gdk_gl_context_create_egl_context (GdkGLContext *context,
+                                   GdkGLAPI      api,
+                                   gboolean      legacy)
 {
-#ifdef HAVE_EGL
   GdkGLContextPrivate *priv = gdk_gl_context_get_instance_private (context);
   GdkDisplay *display = gdk_gl_context_get_display (context);
   EGLDisplay egl_display = gdk_display_get_egl_display (display);
-
-  if (egl_display)
+  GdkGLContext *share = gdk_display_get_gl_context (display);
+  GdkGLContextPrivate *share_priv = gdk_gl_context_get_instance_private (share);
+  EGLConfig egl_config;
+  EGLContext ctx;
+  EGLint context_attribs[N_EGL_ATTRS];
+  gboolean debug_bit, forward_bit;
+  int major, minor, flags = 0;
+  G_GNUC_UNUSED gint64 start_time = GDK_PROFILER_CURRENT_TIME;
+
+  if (!gdk_gl_context_is_api_allowed (context, api, NULL)
+      || (api == GDK_GL_API_GL && !eglBindAPI (EGL_OPENGL_API))
+      || (api == GDK_GL_API_GLES && !eglBindAPI (EGL_OPENGL_ES_API)))
+    return 0;
+
+  /* We will use the default version matching the context status
+   * unless the user requested a version which makes sense */
+  gdk_gl_context_get_matching_version (api, legacy,
+                                       display->have_egl_win32_libangle,
+                                       &major, &minor);
+  if (priv->major > major || (priv->major == major && priv->minor > minor))
     {
-      EGLConfig egl_config;
-      GdkGLContext *share = gdk_display_get_gl_context (display);
-      GdkGLContextPrivate *share_priv = gdk_gl_context_get_instance_private (share);
-      EGLContext ctx;
-      EGLint context_attribs[N_EGL_ATTRS];
-      int major, minor, flags;
-      gboolean debug_bit, forward_bit, legacy_bit;
-      GdkGLAPI api;
-      int i = 0;
-      G_GNUC_UNUSED gint64 start_time = GDK_PROFILER_CURRENT_TIME;
-
-      if (share != NULL)
-        gdk_gl_context_get_required_version (share, &major, &minor);
-      else
-        gdk_gl_context_get_required_version (context, &major, &minor);
+      major = priv->major;
+      minor = priv->minor;
+    }
 
-      debug_bit = gdk_gl_context_get_debug_enabled (context);
-      forward_bit = gdk_gl_context_get_forward_compatible (context);
-      legacy_bit = GDK_DISPLAY_DEBUG_CHECK (display, GL_LEGACY) ||
-                   (share != NULL && gdk_gl_context_is_legacy (share));
+  debug_bit = gdk_gl_context_get_debug_enabled (context);
+  forward_bit = gdk_gl_context_get_forward_compatible (context);
 
-      if (display->have_egl_no_config_context)
-        egl_config = NULL;
-      else
-        egl_config = gdk_display_get_egl_config (display);
+  if (display->have_egl_no_config_context)
+    egl_config = NULL;
+  else
+    egl_config = gdk_display_get_egl_config (display);
 
-      flags = 0;
+  if (debug_bit)
+    flags |= EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR;
+  if (forward_bit)
+    flags |= EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR;
 
-      if (debug_bit)
-        flags |= EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR;
-      if (forward_bit)
-        flags |= EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR;
+  gdk_gl_context_setup_context_attributes (context_attribs, api, major, minor, legacy, flags);
 
-      if (gdk_gl_context_is_api_allowed (context, GDK_GL_API_GL, NULL) &&
-          eglBindAPI (EGL_OPENGL_API))
-        {
-          /* We want a core profile, unless in legacy mode */
-          context_attribs[i++] = EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR;
-          context_attribs[i++] = legacy_bit
-                               ? EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR
-                               : EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR;
-
-          /* Specify the version */
-          context_attribs[i++] = EGL_CONTEXT_MAJOR_VERSION_KHR;
-          context_attribs[i++] = legacy_bit ? 3 : major;
-          context_attribs[i++] = EGL_CONTEXT_MINOR_VERSION_KHR;
-          context_attribs[i++] = legacy_bit ? 0 : minor;
-          api = GDK_GL_API_GL;
-        }
-      else if (gdk_gl_context_is_api_allowed (context, GDK_GL_API_GLES, NULL) &&
-               eglBindAPI (EGL_OPENGL_ES_API))
-        {
-          context_attribs[i++] = EGL_CONTEXT_CLIENT_VERSION;
-          if (major == 3)
-            context_attribs[i++] = 3;
-          else
-            context_attribs[i++] = 2;
-          api = GDK_GL_API_GLES;
-        }
-      else
-        {
-          g_set_error_literal (error, GDK_GL_ERROR, GDK_GL_ERROR_NOT_AVAILABLE,
-                               _("The EGL implementation does not support any allowed APIs"));
-          return 0;
-        }
+  GDK_DISPLAY_NOTE (display, OPENGL,
+                    g_message ("Creating EGL context version %d.%d (debug:%s, forward:%s, legacy:%s, es:%s)",
+                               major, minor,
+                               debug_bit ? "yes" : "no",
+                               forward_bit ? "yes" : "no",
+                               legacy ? "yes" : "no",
+                               api == GDK_GL_API_GLES ? "yes" : "no"));
 
-      /* Specify the flags */
-      context_attribs[i++] = EGL_CONTEXT_FLAGS_KHR;
-      context_attribs[i++] = flags;
-
-      context_attribs[i++] = EGL_NONE;
-      g_assert (i < N_EGL_ATTRS);
-
-      GDK_DISPLAY_NOTE (display, OPENGL,
-                g_message ("Creating EGL context version %d.%d (debug:%s, forward:%s, legacy:%s, es:%s)",
-                                   major, minor,
-                                   debug_bit ? "yes" : "no",
-                                   forward_bit ? "yes" : "no",
-                                   legacy_bit ? "yes" : "no",
-                                   api == GDK_GL_API_GLES ? "yes" : "no"));
-
-      ctx = eglCreateContext (egl_display,
-                              egl_config,
-                              share != NULL ? share_priv->egl_context
-                                            : EGL_NO_CONTEXT,
-                              context_attribs);
-
-      /* If context creation failed without the ES bit, let's try again with it */
-      if (ctx == NULL && gdk_gl_context_is_api_allowed (context, GDK_GL_API_GLES, NULL) && eglBindAPI (EGL_OPENGL_ES_API))
-        {
-          i = 0;
-          context_attribs[i++] = EGL_CONTEXT_MAJOR_VERSION;
-          context_attribs[i++] = 2;
-          context_attribs[i++] = EGL_CONTEXT_MINOR_VERSION;
-          context_attribs[i++] = 0;
-          context_attribs[i++] = EGL_CONTEXT_FLAGS_KHR;
-          context_attribs[i++] = flags & ~EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR;
-          context_attribs[i++] = EGL_NONE;
-          g_assert (i < N_EGL_ATTRS);
-
-          legacy_bit = FALSE;
-          api = GDK_GL_API_GLES;
-
-          GDK_DISPLAY_NOTE (display, OPENGL,
-                    g_message ("eglCreateContext failed, switching to OpenGL ES"));
-          ctx = eglCreateContext (egl_display,
-                                  egl_config,
-                                  share != NULL ? share_priv->egl_context
-                                                : EGL_NO_CONTEXT,
-                                  context_attribs);
-        }
+  ctx = eglCreateContext (egl_display,
+                          egl_config,
+                          share ? share_priv->egl_context : EGL_NO_CONTEXT,
+                          context_attribs);
 
-      /* If context creation failed without the legacy bit, let's try again with it */
-      if (ctx == NULL && gdk_gl_context_is_api_allowed (context, GDK_GL_API_GL, NULL) && eglBindAPI (EGL_OPENGL_API))
-        {
-          i = 0;
-          context_attribs[i++] = EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR;
-          context_attribs[i++] = EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR;
-          context_attribs[i++] = EGL_CONTEXT_MAJOR_VERSION;
-          context_attribs[i++] = 3;
-          context_attribs[i++] = EGL_CONTEXT_MINOR_VERSION;
-          context_attribs[i++] = 0;
-          context_attribs[i++] = EGL_CONTEXT_FLAGS_KHR;
-          context_attribs[i++] = flags & ~EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR;
-          context_attribs[i++] = EGL_NONE;
-          g_assert (i < N_EGL_ATTRS);
-
-          legacy_bit = TRUE;
-          api = GDK_GL_API_GL;
-
-          GDK_DISPLAY_NOTE (display, OPENGL,
-                    g_message ("eglCreateContext failed, switching to legacy"));
-          ctx = eglCreateContext (egl_display,
-                                  egl_config,
-                                  share != NULL ? share_priv->egl_context
-                                                : EGL_NO_CONTEXT,
-                                  context_attribs);
-        }
+  if (ctx == NULL)
+      return 0;
 
-      if (ctx == NULL)
-        {
-          g_set_error_literal (error, GDK_GL_ERROR,
-                               GDK_GL_ERROR_NOT_AVAILABLE,
-                               _("Unable to create a GL context"));
-          return 0;
-        }
+  GDK_DISPLAY_NOTE (display, OPENGL, g_message ("Created EGL context[%p]", ctx));
 
-      GDK_DISPLAY_NOTE (display, OPENGL, g_message ("Created EGL context[%p]", ctx));
+  priv->egl_context = ctx;
+  gdk_gl_context_set_is_legacy (context, legacy);
 
-      priv->egl_context = ctx;
+  if (epoxy_has_egl_extension (egl_display, "EGL_KHR_swap_buffers_with_damage"))
+    priv->eglSwapBuffersWithDamage = (gpointer) epoxy_eglGetProcAddress ("eglSwapBuffersWithDamageKHR");
+  else if (epoxy_has_egl_extension (egl_display, "EGL_EXT_swap_buffers_with_damage"))
+    priv->eglSwapBuffersWithDamage = (gpointer) epoxy_eglGetProcAddress ("eglSwapBuffersWithDamageEXT");
 
-      gdk_gl_context_set_is_legacy (context, legacy_bit);
+  gdk_profiler_end_mark (start_time, "realize GdkWaylandGLContext", NULL);
 
-      if (epoxy_has_egl_extension (egl_display, "EGL_KHR_swap_buffers_with_damage"))
-        priv->eglSwapBuffersWithDamage = (gpointer)epoxy_eglGetProcAddress ("eglSwapBuffersWithDamageKHR");
-      else if (epoxy_has_egl_extension (egl_display, "EGL_EXT_swap_buffers_with_damage"))
-        priv->eglSwapBuffersWithDamage = (gpointer)epoxy_eglGetProcAddress ("eglSwapBuffersWithDamageEXT");
+  return api;
+}
 
-      gdk_profiler_end_mark (start_time, "realize GdkWaylandGLContext", NULL);
+static GdkGLAPI
+gdk_gl_context_realize_egl (GdkGLContext  *context,
+                            GError       **error)
+{
+  GdkDisplay *display = gdk_gl_context_get_display (context);
+  GdkGLContext *share = gdk_display_get_gl_context (display);
+  GdkGLAPI api, preferred_api;
+  gboolean prefer_legacy;
+
+  if (share && gdk_gl_context_is_api_allowed (context,
+                                              gdk_gl_context_get_api (share),
+                                              NULL))
+    preferred_api = gdk_gl_context_get_api (share);
+  else if (gdk_gl_context_is_api_allowed (context, GDK_GL_API_GL, NULL))
+    preferred_api = GDK_GL_API_GL;
+  else if (gdk_gl_context_is_api_allowed (context, GDK_GL_API_GLES, NULL))
+    preferred_api = GDK_GL_API_GLES;
+  else
+    {
+      g_set_error_literal (error, GDK_GL_ERROR,
+                           GDK_GL_ERROR_NOT_AVAILABLE,
+                           _("No GL API allowed."));
+      return 0;
+    }
+
+  prefer_legacy = (GDK_DISPLAY_DEBUG_CHECK (display, GL_LEGACY) ||
+                   (share != NULL && gdk_gl_context_is_legacy (share)));
 
-      return api;
+  if (preferred_api == GDK_GL_API_GL)
+    {
+      if ((api = gdk_gl_context_create_egl_context (context, GDK_GL_API_GL, prefer_legacy)) ||
+          (api = gdk_gl_context_create_egl_context (context, GDK_GL_API_GLES, FALSE)) ||
+          (api = gdk_gl_context_create_egl_context (context, GDK_GL_API_GL, TRUE)))
+        return api;
+    }
+  else
+    {
+      if ((api = gdk_gl_context_create_egl_context (context, GDK_GL_API_GLES, FALSE)) ||
+          (api = gdk_gl_context_create_egl_context (context, GDK_GL_API_GL, prefer_legacy)) ||
+          (api = gdk_gl_context_create_egl_context (context, GDK_GL_API_GL, TRUE)))
+        return api;
     }
+
+  g_set_error_literal (error, GDK_GL_ERROR,
+                       GDK_GL_ERROR_NOT_AVAILABLE,
+                       _("Unable to create a GL context"));
+  return 0;
+}
+#endif /* HAVE_EGL */
+
+static GdkGLAPI
+gdk_gl_context_default_realize (GdkGLContext  *context,
+                                GError       **error)
+{
+#ifdef HAVE_EGL
+  GdkDisplay *display = gdk_gl_context_get_display (context);
+
+  if (gdk_display_get_egl_display (display))
+    return gdk_gl_context_realize_egl (context, error);
 #endif
 
   g_set_error_literal (error, GDK_GL_ERROR, GDK_GL_ERROR_NOT_AVAILABLE,
@@ -667,7 +714,7 @@ gdk_gl_context_class_init (GdkGLContextClass *klass)
   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
   GdkDrawContextClass *draw_context_class = GDK_DRAW_CONTEXT_CLASS (klass);
 
-  klass->realize = gdk_gl_context_real_realize;
+  klass->realize = gdk_gl_context_default_realize;
   klass->get_damage = gdk_gl_context_real_get_damage;
   klass->is_shared = gdk_gl_context_real_is_shared;
   klass->make_current = gdk_gl_context_real_make_current;
@@ -960,6 +1007,40 @@ gdk_gl_context_get_forward_compatible (GdkGLContext *context)
   return priv->forward_compatible;
 }
 
+static void
+gdk_gl_context_get_default_version (GdkGLContext *context,
+                                    int          *major,
+                                    int          *minor)
+{
+  GdkDisplay *display = gdk_gl_context_get_display (context);
+  GdkGLAPI api = 0;
+  gboolean legacy = FALSE;
+
+  if (display->have_egl_win32_libangle)
+    api = GDK_GL_API_GLES;
+
+#ifdef G_ENABLE_DEBUG
+  if (GDK_DISPLAY_DEBUG_CHECK (display, GL_GLES))
+    api = GDK_GL_API_GLES;
+#endif
+
+  if (gdk_gl_context_is_realized (context))
+    {
+      api = gdk_gl_context_get_api (context);
+      legacy = gdk_gl_context_is_legacy (context);
+    }
+  else if (!api)
+    {
+      api = GDK_GL_API_GL;
+      if (gdk_gl_context_get_allowed_apis (context) == GDK_GL_API_GLES)
+        api = GDK_GL_API_GLES;
+    }
+
+  gdk_gl_context_get_matching_version (api, legacy,
+                                       display->have_egl_win32_libangle,
+                                       major, minor);
+}
+
 /**
  * gdk_gl_context_set_required_version:
  * @context: a `GdkGLContext`
@@ -970,7 +1051,10 @@ gdk_gl_context_get_forward_compatible (GdkGLContext *context)
  *
  * Setting @major and @minor to zero will use the default values.
  *
- * The `GdkGLContext` must not be realized or made current prior to calling
+ * Setting @major and @minor lower than the minimum versions required
+ * by GTK will result in the context choosing the minimum version.
+ *
+ * The @context must not be realized or made current prior to calling
  * this function.
  */
 void
@@ -979,44 +1063,12 @@ gdk_gl_context_set_required_version (GdkGLContext *context,
                                      int           minor)
 {
   GdkGLContextPrivate *priv = gdk_gl_context_get_instance_private (context);
-  gboolean force_gles = FALSE;
-  int version, min_ver;
-#ifdef G_ENABLE_DEBUG
-  GdkDisplay *display;
-#endif
 
   g_return_if_fail (GDK_IS_GL_CONTEXT (context));
   g_return_if_fail (!gdk_gl_context_is_realized (context));
 
-  /* this will take care of the default */
-  if (major == 0 && minor == 0)
-    {
-      priv->major = 0;
-      priv->minor = 0;
-      return;
-    }
-
-  version = (major * 100) + minor;
-
-#ifdef G_ENABLE_DEBUG
-  display = gdk_draw_context_get_display (GDK_DRAW_CONTEXT (context));
-  force_gles = GDK_DISPLAY_DEBUG_CHECK (display, GL_GLES);
-#endif
-  /* Enforce a minimum context version number of 3.2 for desktop GL,
-   * and 2.0 for GLES
-   */
-  if (gdk_gl_context_get_use_es (context) || force_gles)
-    min_ver = 200;
-  else
-    min_ver = 302;
-
-  if (version < min_ver)
-    {
-      g_warning ("gdk_gl_context_set_required_version - GL context versions less than 3.2 are not supported.");
-      version = min_ver;
-    }
-  priv->major = version / 100;
-  priv->minor = version % 100;
+  priv->major = major;
+  priv->minor = minor;
 }
 
 gboolean
@@ -1055,7 +1107,10 @@ gdk_gl_context_check_version (GdkGLContext *self,
  * @major: (out) (nullable): return location for the major version to request
  * @minor: (out) (nullable): return location for the minor version to request
  *
- * Retrieves required OpenGL version.
+ * Retrieves required OpenGL version set as a requirement for the @context
+ * realization. It will not change even if a greater OpenGL version is supported
+ * and used after the @context is realized. See
+ * [method@Gdk.GLContext.get_version] for the real version in use.
  *
  * See [method@Gdk.GLContext.set_required_version].
  */
@@ -1065,37 +1120,12 @@ gdk_gl_context_get_required_version (GdkGLContext *context,
                                      int          *minor)
 {
   GdkGLContextPrivate *priv = gdk_gl_context_get_instance_private (context);
-  gboolean force_gles = FALSE;
-  GdkDisplay *display;
   int default_major, default_minor;
   int maj, min;
 
   g_return_if_fail (GDK_IS_GL_CONTEXT (context));
 
-  display = gdk_draw_context_get_display (GDK_DRAW_CONTEXT (context));
-
-#ifdef G_ENABLE_DEBUG
-  force_gles = GDK_DISPLAY_DEBUG_CHECK (display, GL_GLES);
-#endif
-
-  /* libANGLE on Windows at least requires GLES 3.0+ */
-  if (display->have_egl_win32_libangle)
-    force_gles = TRUE;
-
-  /* Default fallback values for uninitialised contexts; we
-   * enforce a context version number of 3.2 for desktop GL,
-   * and 2.0 for GLES
-   */
-  if (gdk_gl_context_get_use_es (context) || force_gles)
-    {
-      default_major = display->have_egl_win32_libangle ? 3 : 2;
-      default_minor = 0;
-    }
-  else
-    {
-      default_major = 3;
-      default_minor = 2;
-    }
+  gdk_gl_context_get_default_version (context, &default_major, &default_minor);
 
   if (priv->major > 0)
     maj = priv->major;
@@ -1342,6 +1372,8 @@ gdk_gl_context_set_use_es (GdkGLContext *context,
  *
  * Checks whether the @context is using an OpenGL or OpenGL ES profile.
  *
+ * The @context must be realized prior to calling this function.
+ *
  * Returns: %TRUE if the `GdkGLContext` is using an OpenGL ES profile
  */
 gboolean
@@ -1350,6 +1382,7 @@ gdk_gl_context_get_use_es (GdkGLContext *context)
   GdkGLContextPrivate *priv = gdk_gl_context_get_instance_private (context);
 
   g_return_val_if_fail (GDK_IS_GL_CONTEXT (context), FALSE);
+  g_return_val_if_fail (gdk_gl_context_is_realized (context), FALSE);
 
   return priv->api == GDK_GL_API_GLES;
 }
@@ -1672,7 +1705,8 @@ gdk_gl_context_get_shared_context (GdkGLContext *context)
  *
  * Retrieves the OpenGL version of the @context.
  *
- * The @context must be realized prior to calling this function.
+ * The @context must be realized and should be current prior to calling this
+ * function.
  */
 void
 gdk_gl_context_get_version (GdkGLContext *context,
@@ -1684,6 +1718,18 @@ gdk_gl_context_get_version (GdkGLContext *context,
   g_return_if_fail (GDK_IS_GL_CONTEXT (context));
   g_return_if_fail (gdk_gl_context_is_realized (context));
 
+  if (priv->gl_version == 0)
+    {
+      GdkGLContext *current = gdk_gl_context_get_current ();
+      gdk_gl_context_make_current (context);
+      g_assert (priv->gl_version != 0);
+
+      if (current)
+        gdk_gl_context_make_current (current);
+      else
+        gdk_gl_context_clear_current ();
+    }
+
   if (major != NULL)
     *major = priv->gl_version / 10;
   if (minor != NULL)
@@ -1851,4 +1897,3 @@ gdk_gl_backend_use (GdkGLBackend backend_type)
 
   g_assert (the_gl_backend_type == backend_type);
 }
-
diff --git a/gdk/gdkglcontextprivate.h b/gdk/gdkglcontextprivate.h
index cd58c30b4e..d4573db8d0 100644
--- a/gdk/gdkglcontextprivate.h
+++ b/gdk/gdkglcontextprivate.h
@@ -33,6 +33,22 @@ G_BEGIN_DECLS
 #define GDK_EGL_MIN_VERSION_MAJOR (1)
 #define GDK_EGL_MIN_VERSION_MINOR (4)
 
+/* Minimum OpenGL versions supported by GTK.
+ * Backends should make sure to never create a context of a previous version.
+ *
+ * The macros refer to OpenGL; OpenGL with OPENGL_COMPATIBILITY_PROFILE_BIT as
+ * OPENGL_PROFILE_MASK; OpenGL ES; and OpenGL ES win32 Angle implementation,
+ * respectively
+ */
+#define GDK_GL_MIN_GL_VERSION_MAJOR (3)
+#define GDK_GL_MIN_GL_VERSION_MINOR (2)
+#define GDK_GL_MIN_GL_LEGACY_VERSION_MAJOR (3)
+#define GDK_GL_MIN_GL_LEGACY_VERSION_MINOR (0)
+#define GDK_GL_MIN_GLES_VERSION_MAJOR (2)
+#define GDK_GL_MIN_GLES_VERSION_MINOR (0)
+#define GDK_GL_MIN_GLES_WIN32_ANGLE_VERSION_MAJOR (3)
+#define GDK_GL_MIN_GLES_WIN32_ANGLE_VERSION_MINOR (0)
+
 typedef enum {
   GDK_GL_NONE = 0,
   GDK_GL_EGL,
